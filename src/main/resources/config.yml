# GrimAC main configuration
# Source code: https://github.com/MWHunter/Grim
# Copyright DefineOutside, Licensed under GPLv3
#
# Modified binaries, or plugins with copied grim code, must be private, or with full source code available to buyers.
# Report any license violations to DefineOutside
#

prefix: "&bGrim &8Â»"

alerts:
  # Valid placeholders:
  # %prefix%
  # %player%
  # %check_name%
  # %vl% - violations
  # %check-verbose% - extra information from the check such as offsets, not all checks will add information
  format: "%prefix% &f%player% &bfailed &f%check_name% &f(x&c%vl%&f) &7%verbose%"
  # Should players with grim.alerts permission automatically enable alerts on join?
  enable-on-join: true

client-brand:
  format: "%prefix% &f%player% joined using %brand%"
  ignored-clients:
    - "vanilla"

messages:
  alerts-enabled: "%prefix% &fAlerts enabled"
  alerts-disabled: "%prefix% &fAlerts disabled"
  console-specify-target: "%prefix% &cYou must specify a target as the console!"
  player-not-found: "%prefix% &cPlayer is exempt or offline!"
  profile:
    - "&7======================"
    - "%prefix% &bProfile for &f%player%"
    - "&bVersion: &f%version%"
    - "&bClient Brand: &f%brand%"
    - "&bHorizontal Sensitivity: &f%h_sensitivity%%"
    - "&bVertical Sensitivity: &f%v_sensitivity%%"
    - "&bFastMath Enabled: &f%fast_math%"
    - "&7======================"
  help:
    - "&7======================"
    - "/grim alerts &f- &7Toggle alerts"
    - "/grim profile &f- &7View player info"
    - "/grim help &f- &7View this help message"
    - "/grim debug <player> &f- &7Developer Prediction output"
    - "/grim perf &f- &7Developer ms/prediction"
    - "&7======================"

# GrimAC can usually check movement within 0.00000001 precision
# It is usually safe to check movement to 0.0001 with very few falses
Prediction:
  # There isn't much point checking this small of precision to catch 0.1% speed increases,
  # but it would be a waste of a prediction engine to not check this far
  Small:
    # How large of an offset from the player's movement should we create a violation for?
    # Measured in blocks (not squared) from the possible movement
    threshold: 0.0001
    # Setback vl: How many times should the player have to go over this threshold to set them back?
    # Set to -1 to disable setbacks
    setbackvl: 100
    # Decay: How many violations should be reduced from the player for being below this threshold
    decay: 0.05
    # Alert vl: How many violations does the player need before they trigger alerts?
    # Set to -1 to disable alerts
    dont-alert-until: 80
    # Alert interval: Instead of sending 20 alerts for 20 flags, we send 1 alert every 20 flags
    alert-interval: 40
  # The vast majority of cheats flag in this offset range, 0.01-0.6
  Medium:
    threshold: 0.01
    setbackvl: 30
    decay: 0.02
    dont-alert-until: 40
    alert-interval: 20
  # This is to stop players from launching themselves extremely far in one tick
  Large:
    threshold: 0.1
    setbackvl: 1
    decay: 0.001
    dont-alert-until: 10
    alert-interval: 10

# Vehicles are client sided in 1.9+, and server sided in 1.8 and below. This section only applies to 1.9+ servers
# Vehicles are less stable than regular predictions as netcode for vehicles is significantly flawed
Vehicle:
  Small:
    threshold: 0.005
    setbackvl: 280
    decay: 0.05
    dont-alert-until: 400
    alert-interval: 80
  Medium:
    threshold: 0.05
    setbackvl: 80
    decay: 0.02
    dont-alert-until: 120
    alert-interval: 60
  Large:
    threshold: 1
    setbackvl: 1
    decay: 0.001
    dont-alert-until: 10
    alert-interval: 40


# Prediction-based ground spoof check
# Extremely stable
GroundSpoof:
  setbackvl: 10
  decay: 0.01
  dont-alert-until: 20
  alert-interval: 20

# Checks LOOK and GROUND packets for NoFall
# Mostly stable, this cheat results in no advantage as we correct it before it touches the server
NoFall:
  setbackvl: 10 # This doesn't give any advantage
  decay: 0.05 # This packet is rarer than other packets
  dont-alert-until: 10
  alert-interval: 15

# Prediction-based no slow check
# Grim accounts for buggy netcode here... hard to false even when spamming right click and offhand button
# Much more stable than other anticheats, but please report any falses... I have fixed a ton of netcode issues here.
NoSlow:
  # How much of an offset is "cheating"
  # By default this is lower than other offs
  # Flags by 0.03-0.2 consistently with NoSlow on
  threshold: 0.001
  # Setback fast on the first item to remove any advantage NoSlow gives
  setbackvl: 5
  # Decay's when the player uses an item AND is slowed by it
  decay: 0.05
  # It takes 32 ticks to fully consume an item... 25 will safely flag cheats here
  dont-alert-until: 25
  # You likely don't want to be spammed with alerts. Target alerting once per item that wasn't slowed for
  alert-interval: 25

Knockback:
  # How much of an offset is "cheating"
  # By default this is 1e-5, which is safe and sane
  # Measured in blocks (not squared) from the possible movement
  threshold: 0.00001
  setbackvl: 10
  decay: 0.025
  dont-alert-until: 8
  alert-interval: 5

Explosion:
  threshold: 0.00001
  setbackvl: 10
  decay: 0.025
  dont-alert-until: 8
  alert-interval: 5

TimerA:
  # Target 1.005 timer
  decay: 0.005
  setbackvl: 10
  dont-alert-until: 5
  alert-interval: 5
  # Milliseconds that the player can accumulate for later use when they fall behind
  # Could potentially allow 1.8 fast use/fast heal/fast bow bypasses if set too high, 120 ms seems like a good balance
  drift: 120
# Same check method as TimerA, but for vehicles
TimerVehicle:
  # Target 1.005 timer
  decay: 0.005
  setbackvl: 10
  dont-alert-until: 5
  alert-interval: 5


EntityControl:
  decay: 0.05
  setbackvl: 25
  dont-alert-until: 40
  alert-interval: 40

KillAuraA:
  decay: 0
  dont-alert-until: 2
  alert-interval: 1

Reach:
  # How much should we expand hitboxes by? 0.0005 should detect 3.0005+ reach
  #
  # There is 0.03 forced expansion with some client versions, or some client/server combinations due to
  # slight protocol differences or protocol limitations.  I am working on fixing this.
  threshold: 0.0005
  # Should we cancel hits that we know are impossible?
  # 3.00-3.03 hits may go through but still be flagged, due to packet order limitations
  block-impossible-hits: true
  # This will send an additional packet at the end of every tick to increase the likelihood of catching cheats
  # This injects into server's connection list to send a final packet just before the server flushes
  # Enabling this will increase bandwidth usage for all players
  # Enabling this may also cause a deadlock with ViaVersion's injection on 1.17+ servers
  # Enabling this will consume performance on the main server thread
  # Enabling this will catch more cheaters.
  # Leaving this disabled will still catch cheaters and will not cause false positives
  # Unless you are a 1.8 PvP focused server, this additional packet is not recommended
  enable-post-packet: false
  # This will send an additional packet at the start of every tick to increase the likelihood of catching cheats
  # This is safer then the post packet, but will increase bandwidth usage for all players
  # Leaving this disabled will still catch cheaters and will not cause false positives
  # This will not consume performance on the main server thread
  enable-pre-packet: false

# Impossible to false
BadPacketsA:
  decay: 0
  dont-alert-until: 1
  alert-interval: 1
# Impossible to false
BadPacketsB:
  decay: 0
  dont-alert-until: 1
  alert-interval: 1
# Impossible to false
BadPacketsC:
  decay: 0
  dont-alert-until: 1
  alert-interval: 1
# Impossible to false
BadPacketsD:
  decay: 0
  dont-alert-until: 1
  alert-interval: 1
# Impossible to false
BadPacketsE:
  decay: 0
  dont-alert-until: 1
  alert-interval: 1
# Possible to false exactly once
BadPacketsF:
  decay: 0
  dont-alert-until: 2
  alert-interval: 1
# Theoretically possible, but practically impossible to false
BadPacketsG:
  decay: 0
  dont-alert-until: 1
  alert-interval: 1
# Impossible to false
CrashA:
  decay: 0
  dont-alert-until: 1
  alert-interval: 1
# Possible but unlikely to false
CrashB:
  decay: 0.01
  dont-alert-until: 5
  alert-interval: 5
# Possible but unlikely to false
DisablerA:
  decay: 0
  dont-alert-until: 5
  alert-interval: 10
# Possible but unlikely to false
DisablerB:
  decay: 0
  dont-alert-until: 5
  alert-interval: 10
# Possible but unlikely to false
DisablerC:
  decay: 0
  dont-alert-until: 5
  alert-interval: 10
# Possible but unlikely to false
DisablerD:
  decay: 0
  dont-alert-until: 5
  alert-interval: 10
# The next checks are all post checks
# These are possible to false with an unstable connection
# However, this is mostly mitigated by logic
# A client consistently failing these checks are likely to be a cheater
PostA:
  decay: 0.05
  dont-alert-until: 5
  alert-interval: 10
PostB:
  decay: 0.05
  dont-alert-until: 5
  alert-interval: 10
PostC:
  decay: 0.05
  dont-alert-until: 5
  alert-interval: 10
PostD:
  decay: 0.05
  dont-alert-until: 5
  alert-interval: 10
PostE:
  decay: 0.05
  dont-alert-until: 5
  alert-interval: 10
PostF:
  decay: 0.05
  dont-alert-until: 5
  alert-interval: 10
PostG:
  decay: 0.05
  dont-alert-until: 5
  alert-interval: 10
PostH:
  decay: 0.05
  dont-alert-until: 5
  alert-interval: 10
