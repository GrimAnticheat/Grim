package ac.grim.grimac.checks.impl.exploit;

import ac.grim.grimac.checks.Check;
import ac.grim.grimac.checks.CheckData;
import ac.grim.grimac.checks.type.PacketCheck;
import ac.grim.grimac.player.GrimPlayer;
import com.github.retrooper.packetevents.event.PacketReceiveEvent;
import com.github.retrooper.packetevents.protocol.packettype.PacketType;
import com.github.retrooper.packetevents.wrapper.play.client.WrapperPlayClientChatMessage;
import com.github.retrooper.packetevents.wrapper.play.client.WrapperPlayClientNameItem;

import java.util.regex.Pattern;

@CheckData(name = "ExploitA", experimental = true)
public class ExploitA extends Check implements PacketCheck {

    public ExploitA(GrimPlayer playerData) {
        super(playerData);
    }

    private static final Pattern EXPLOIT_PATTERN = Pattern.compile("\\$\\{.+}");

    /*
     WARNING: This doesn't fully patch Log4J! It is highly recommended you update your server
     jar to a version that has true Log4J migrations instead of using a plugin. However, this
     patch is better than nothing and will still be useful for punishing players who attempt
     to abuse this exploit.
     */
    @Override
    public void onPacketReceive(PacketReceiveEvent event) {
        if (event.getPacketType() == PacketType.Play.Client.CHAT_MESSAGE) {
            if (true) return; // TODO: Fix PacketEvents pls retrooper
            WrapperPlayClientChatMessage wrapper = new WrapperPlayClientChatMessage(event);
            String message = wrapper.getMessage();
            if (checkString(message)) {
                event.setCancelled(true);
                player.onPacketCancel();
            }
        } else if (event.getPacketType() == PacketType.Play.Client.NAME_ITEM) {
            WrapperPlayClientNameItem wrapper = new WrapperPlayClientNameItem(event);
            String name = wrapper.getItemName();
            if (checkString(name)) {
                event.setCancelled(true);
                player.onPacketCancel();
            }
        }
    }

    public boolean checkString(String message) {
        return EXPLOIT_PATTERN.matcher(message).matches() && flagAndAlert();
    }
}
